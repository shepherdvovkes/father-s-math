/**
 * –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π, –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —É—Ä–æ–∫–æ–≤ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ–º —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
 */
class EducationPlatform {
    constructor() {
        this.database = new EducationDatabase();
        this.currentSubject = null;
        this.currentTopic = null;
        this.currentSubtopic = null;
        this.currentLesson = null;
        
        this.initializeElements();
        this.setupEventListeners();
        this.loadSubjects();
        this.updateStatistics();
    }

    initializeElements() {
        // –û—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        this.subjectsGrid = document.getElementById('subjectsGrid');
        this.topicsSidebar = document.getElementById('topicsSidebar');
        this.topicsTree = document.getElementById('topicsTree');
        this.contentPlaceholder = document.getElementById('contentPlaceholder');
        this.lessonContent = document.getElementById('lessonContent');
        this.currentSubjectName = document.getElementById('currentSubjectName');
        this.backToSubjectsBtn = document.getElementById('backToSubjects');
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        this.totalLessonsElement = document.getElementById('totalLessons');
        this.totalSubjectsElement = document.getElementById('totalSubjects');
        
        // –ö–æ–Ω—Ç–µ–Ω—Ç —É—Ä–æ–∫–∞
        this.lessonTitleElement = document.getElementById('lessonTitle');
        this.lessonTypeElement = document.getElementById('lessonType');
        this.lessonDifficultyElement = document.getElementById('lessonDifficulty');
        this.lessonDescriptionElement = document.getElementById('lessonDescription');
        this.theorySection = document.getElementById('theorySection');
        this.interactiveSection = document.getElementById('interactiveSection');
        this.tagsContainer = document.getElementById('tagsContainer');
        
        // –§–æ—Ä–º—ã –∏ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
        this.lessonModal = document.getElementById('lessonModal');
        this.lessonForm = document.getElementById('lessonForm');
        this.modalTitle = document.getElementById('modalTitle');
        this.modalClose = document.getElementById('modalClose');
        this.modalCancel = document.getElementById('modalCancel');
        this.modalSave = document.getElementById('modalSave');
        
        // –ü–æ–ª—è —Ñ–æ—Ä–º—ã
        this.lessonTitleInput = document.getElementById('lessonTitleInput');
        this.lessonDescriptionInput = document.getElementById('lessonDescriptionInput');
        this.lessonTypeSelect = document.getElementById('lessonTypeSelect');
        this.lessonDifficultySelect = document.getElementById('lessonDifficultySelect');
        this.lessonTagsInput = document.getElementById('lessonTagsInput');
        
        // –°—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        this.githubUrlInput = document.getElementById('githubUrl');
        this.demoUrlInput = document.getElementById('demoUrl');
        this.saveLinksBtn = document.getElementById('saveLinksBtn');
        this.programEmbed = document.getElementById('programEmbed');
        
        // –¢–µ–≥–∏
        this.newTagInput = document.getElementById('newTagInput');
        this.addTagBtn = document.getElementById('addTagBtn');
        
        // –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
        this.theoryImages = document.getElementById('theoryImages');
        this.theoryImageUpload = document.getElementById('theoryImageUpload');
        
        // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        this.editLessonBtn = document.getElementById('editLessonBtn');
        this.addLessonBtn = document.getElementById('addLessonBtn');
    }

    setupEventListeners() {
        // –ù–∞–≤–∏–≥–∞—Ü–∏—è
        this.backToSubjectsBtn.addEventListener('click', () => this.showSubjects());
        
        // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        this.modalClose.addEventListener('click', () => this.closeModal());
        this.modalCancel.addEventListener('click', () => this.closeModal());
        this.modalSave.addEventListener('click', () => this.saveLesson());
        
        // –î–µ–π—Å—Ç–≤–∏—è —Å —É—Ä–æ–∫–∞–º–∏
        this.editLessonBtn.addEventListener('click', () => this.editCurrentLesson());
        this.addLessonBtn.addEventListener('click', () => this.addNewLesson());
        
        // –°—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        this.saveLinksBtn.addEventListener('click', () => this.saveProgramLinks());
        
        // –¢–µ–≥–∏
        this.addTagBtn.addEventListener('click', () => this.addTag());
        this.newTagInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                e.preventDefault();
                this.addTag();
            }
        });
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        this.theoryImageUpload.addEventListener('change', (e) => this.handleImageUpload(e));
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –µ–≥–æ
        this.lessonModal.addEventListener('click', (e) => {
            if (e.target === this.lessonModal) {
                this.closeModal();
            }
        });
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
     */
    loadSubjects() {
        const subjects = this.database.getSubjects();
        this.subjectsGrid.innerHTML = '';
        
        subjects.forEach(subject => {
            const subjectCard = this.createSubjectCard(subject);
            this.subjectsGrid.appendChild(subjectCard);
        });
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–∞
     */
    createSubjectCard(subject) {
        const card = document.createElement('div');
        card.className = 'subject-card';
        card.innerHTML = `
            <div class="subject-icon">${subject.icon}</div>
            <h3>${subject.name}</h3>
            <p>${this.getSubjectDescription(subject.id)}</p>
        `;
        
        card.addEventListener('click', () => this.selectSubject(subject.id));
        return card;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞
     */
    getSubjectDescription(subjectId) {
        const descriptions = {
            algebra: "–§—É–Ω–∫—Ü–∏–∏, —É—Ä–∞–≤–Ω–µ–Ω–∏—è, —Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—è",
            geometry: "–í–µ–∫—Ç–æ—Ä—ã, –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω–∞—è –≥–µ–æ–º–µ—Ç—Ä–∏—è",
            physics: "–ú–µ—Ö–∞–Ω–∏–∫–∞, —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ",
            programming: "–ê–ª–≥–æ—Ä–∏—Ç–º—ã, —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö"
        };
        return descriptions[subjectId] || "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ";
    }

    /**
     * –í—ã–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞
     */
    selectSubject(subjectId) {
        this.currentSubject = subjectId;
        const subject = this.database.getSubject(subjectId);
        
        this.currentSubjectName.textContent = subject.name;
        this.backToSubjectsBtn.style.display = 'block';
        this.loadTopics(subjectId);
        this.showTopicsSidebar();
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–º –ø—Ä–µ–¥–º–µ—Ç–∞
     */
    loadTopics(subjectId) {
        const topics = this.database.getTopics(subjectId);
        this.topicsTree.innerHTML = '';
        
        topics.forEach(topic => {
            const topicElement = this.createTopicElement(topic, subjectId);
            this.topicsTree.appendChild(topicElement);
        });
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Ç–µ–º—ã
     */
    createTopicElement(topic, subjectId) {
        const topicItem = document.createElement('div');
        topicItem.className = 'topic-item';
        
        const topicHeader = document.createElement('div');
        topicHeader.className = 'topic-header';
        topicHeader.innerHTML = `
            <span class="topic-icon">üìö</span>
            <span class="topic-name">${topic.name}</span>
            <span class="topic-toggle">‚ñ∂</span>
        `;
        
        const subtopicsList = document.createElement('div');
        subtopicsList.className = 'subtopics-list';
        
        const subtopics = this.database.getSubtopics(subjectId, topic.id);
        subtopics.forEach(subtopic => {
            const subtopicElement = this.createSubtopicElement(subtopic, subjectId, topic.id);
            subtopicsList.appendChild(subtopicElement);
        });
        
        topicHeader.addEventListener('click', () => {
            const isExpanded = subtopicsList.classList.contains('expanded');
            const toggle = topicHeader.querySelector('.topic-toggle');
            
            if (isExpanded) {
                subtopicsList.classList.remove('expanded');
                toggle.classList.remove('expanded');
            } else {
                subtopicsList.classList.add('expanded');
                toggle.classList.add('expanded');
            }
        });
        
        topicItem.appendChild(topicHeader);
        topicItem.appendChild(subtopicsList);
        
        return topicItem;
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ–¥—Ç–µ–º—ã
     */
    createSubtopicElement(subtopic, subjectId, topicId) {
        const subtopicItem = document.createElement('div');
        subtopicItem.className = 'subtopic-item';
        
        const subtopicHeader = document.createElement('div');
        subtopicHeader.className = 'subtopic-header';
        subtopicHeader.innerHTML = `
            <span class="subtopic-name">${subtopic.name}</span>
            <span class="topic-toggle">‚ñ∂</span>
        `;
        
        const lessonsList = document.createElement('div');
        lessonsList.className = 'lessons-list';
        
        const lessons = this.database.getLessons(subjectId, topicId, subtopic.id);
        lessons.forEach(lesson => {
            const lessonElement = this.createLessonElement(lesson, subjectId, topicId, subtopic.id);
            lessonsList.appendChild(lessonElement);
        });
        
        subtopicHeader.addEventListener('click', () => {
            const isExpanded = lessonsList.classList.contains('expanded');
            const toggle = subtopicHeader.querySelector('.topic-toggle');
            
            if (isExpanded) {
                lessonsList.classList.remove('expanded');
                toggle.classList.remove('expanded');
            } else {
                lessonsList.classList.add('expanded');
                toggle.classList.add('expanded');
            }
        });
        
        subtopicItem.appendChild(subtopicHeader);
        subtopicItem.appendChild(lessonsList);
        
        return subtopicItem;
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —É—Ä–æ–∫–∞
     */
    createLessonElement(lesson, subjectId, topicId, subtopicId) {
        const lessonItem = document.createElement('div');
        lessonItem.className = 'lesson-item';
        
        const lessonLink = document.createElement('div');
        lessonLink.className = 'lesson-link';
        lessonLink.innerHTML = `
            <span class="lesson-icon">${this.getLessonIcon(lesson.type)}</span>
            <span class="lesson-title">${lesson.title}</span>
            <span class="lesson-type-badge">${this.getLessonTypeText(lesson.type)}</span>
        `;
        
        lessonLink.addEventListener('click', () => {
            this.selectLesson(lesson.id, subjectId, topicId, subtopicId);
        });
        
        lessonItem.appendChild(lessonLink);
        return lessonItem;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ —É—Ä–æ–∫–∞
     */
    getLessonIcon(type) {
        const icons = {
            interactive: '<i class="fas fa-gamepad"></i>',
            theory: '<i class="fas fa-book"></i>'
        };
        return icons[type] || '<i class="fas fa-edit"></i>';
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Ç–∏–ø–∞ —É—Ä–æ–∫–∞
     */
    getLessonTypeText(type) {
        const texts = {
            interactive: '–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π',
            theory: '–¢–µ–æ—Ä–∏—è'
        };
        return texts[type] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }

    /**
     * –í—ã–±–æ—Ä —É—Ä–æ–∫–∞
     */
    selectLesson(lessonId, subjectId, topicId, subtopicId) {
        this.currentLesson = lessonId;
        this.currentSubject = subjectId;
        this.currentTopic = topicId;
        this.currentSubtopic = subtopicId;
        
        const lessonInfo = this.database.getLesson(lessonId);
        if (lessonInfo) {
            this.displayLesson(lessonInfo.lesson);
        }
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Ä–æ–∫–∞
     */
    displayLesson(lesson) {
        this.contentPlaceholder.style.display = 'none';
        this.lessonContent.style.display = 'block';
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Ä–æ–∫–µ
        this.lessonTitleElement.textContent = lesson.title;
        this.lessonTypeElement.textContent = this.getLessonTypeText(lesson.type);
        this.lessonDifficultyElement.textContent = this.getDifficultyText(lesson.difficulty);
        this.lessonDescriptionElement.textContent = lesson.description;
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Å–µ–∫—Ü–∏–∏
        this.theorySection.style.display = lesson.type === 'theory' ? 'block' : 'none';
        this.interactiveSection.style.display = lesson.type === 'interactive' ? 'block' : 'none';
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–≥–∏
        this.loadTags(lesson.tags || []);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        if (lesson.githubUrl) {
            this.githubUrlInput.value = lesson.githubUrl;
        }
        if (lesson.demoUrl) {
            this.demoUrlInput.value = lesson.demoUrl;
            this.embedProgram(lesson.demoUrl);
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        this.loadTheoryImages(lesson.theoryImages || []);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        this.updateActiveStates();
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
     */
    getDifficultyText(difficulty) {
        const texts = {
            easy: '–õ–µ–≥–∫–∏–π',
            medium: '–°—Ä–µ–¥–Ω–∏–π',
            hard: '–°–ª–æ–∂–Ω—ã–π'
        };
        return texts[difficulty] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–≥–æ–≤
     */
    loadTags(tags) {
        this.tagsContainer.innerHTML = '';
        
        tags.forEach(tag => {
            const tagElement = this.createTagElement(tag);
            this.tagsContainer.appendChild(tagElement);
        });
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Ç–µ–≥–∞
     */
    createTagElement(tag) {
        const tagElement = document.createElement('div');
        tagElement.className = 'tag';
        tagElement.innerHTML = `
            ${tag}
            <button class="tag-remove" onclick="this.parentElement.remove()">&times;</button>
        `;
        return tagElement;
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–∞
     */
    addTag() {
        const tagText = this.newTagInput.value.trim();
        if (tagText) {
            const tagElement = this.createTagElement(tagText);
            this.tagsContainer.appendChild(tagElement);
            this.newTagInput.value = '';
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
     */
    loadTheoryImages(images) {
        this.theoryImages.innerHTML = '';
        
        images.forEach(imageUrl => {
            const imageElement = this.createTheoryImageElement(imageUrl);
            this.theoryImages.appendChild(imageElement);
        });
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–æ—Ä–∏–∏
     */
    createTheoryImageElement(imageUrl) {
        const imageDiv = document.createElement('div');
        imageDiv.className = 'theory-image';
        
        const img = document.createElement('img');
        img.src = imageUrl;
        img.alt = '–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª';
        
        imageDiv.appendChild(img);
        return imageDiv;
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
     */
    handleImageUpload(event) {
        const files = event.target.files;
        
        for (let file of files) {
            if (file.type.startsWith('image/')) {
                const reader = new FileReader();
                reader.onload = (e) => {
                    const imageElement = this.createTheoryImageElement(e.target.result);
                    this.theoryImages.appendChild(imageElement);
                };
                reader.readAsDataURL(file);
            }
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã
     */
    saveProgramLinks() {
        const githubUrl = this.githubUrlInput.value.trim();
        const demoUrl = this.demoUrlInput.value.trim();
        
        if (demoUrl) {
            this.embedProgram(demoUrl);
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        if (this.currentLesson) {
            this.database.updateLesson(this.currentLesson, {
                githubUrl: githubUrl || null,
                demoUrl: demoUrl || null
            });
        }
        
        this.showNotification('–°—Å—ã–ª–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!', 'success');
    }

    /**
     * –í—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
     */
    embedProgram(url) {
        this.programEmbed.innerHTML = `<iframe src="${url}" frameborder="0"></iframe>`;
    }

    /**
     * –ü–æ–∫–∞–∑ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ —Ç–µ–º
     */
    showTopicsSidebar() {
        this.topicsSidebar.style.display = 'block';
    }

    /**
     * –ü–æ–∫–∞–∑ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
     */
    showSubjects() {
        this.currentSubject = null;
        this.currentTopic = null;
        this.currentSubtopic = null;
        this.currentLesson = null;
        
        this.contentPlaceholder.style.display = 'block';
        this.lessonContent.style.display = 'none';
        this.backToSubjectsBtn.style.display = 'none';
        this.currentSubjectName.textContent = '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç';
        
        this.updateActiveStates();
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
     */
    updateActiveStates() {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        document.querySelectorAll('.topic-header.active, .subtopic-header.active, .lesson-link.active')
            .forEach(el => el.classList.remove('active'));
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤—ã–±–æ—Ä–∞
        if (this.currentLesson) {
            const lessonLink = document.querySelector(`[data-lesson-id="${this.currentLesson}"]`);
            if (lessonLink) {
                lessonLink.classList.add('active');
            }
        }
    }

    /**
     * –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–∫–∞
     */
    editCurrentLesson() {
        if (!this.currentLesson) return;
        
        const lessonInfo = this.database.getLesson(this.currentLesson);
        if (lessonInfo) {
            this.openLessonModal('edit', lessonInfo.lesson);
        }
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞
     */
    addNewLesson() {
        if (!this.currentSubject || !this.currentTopic || !this.currentSubtopic) {
            this.showNotification('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ç–µ–º—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞', 'warning');
            return;
        }
        
        this.openLessonModal('add');
    }

    /**
     * –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —É—Ä–æ–∫–∞
     */
    openLessonModal(mode, lesson = null) {
        this.modalTitle.textContent = mode === 'edit' ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É—Ä–æ–∫' : '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —É—Ä–æ–∫';
        
        if (mode === 'edit' && lesson) {
            this.lessonTitleInput.value = lesson.title;
            this.lessonDescriptionInput.value = lesson.description;
            this.lessonTypeSelect.value = lesson.type;
            this.lessonDifficultySelect.value = lesson.difficulty;
            this.lessonTagsInput.value = (lesson.tags || []).join(', ');
        } else {
            this.lessonForm.reset();
        }
        
        this.lessonModal.classList.add('show');
    }

    /**
     * –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
     */
    closeModal() {
        this.lessonModal.classList.remove('show');
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—Ä–æ–∫–∞
     */
    saveLesson() {
        const formData = new FormData(this.lessonForm);
        const lessonData = {
            title: this.lessonTitleInput.value.trim(),
            description: this.lessonDescriptionInput.value.trim(),
            type: this.lessonTypeSelect.value,
            difficulty: this.lessonDifficultySelect.value,
            tags: this.lessonTagsInput.value.split(',').map(tag => tag.trim()).filter(tag => tag)
        };
        
        if (!lessonData.title || !lessonData.description) {
            this.showNotification('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è', 'error');
            return;
        }
        
        try {
            if (this.modalTitle.textContent.includes('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å')) {
                // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                this.database.updateLesson(this.currentLesson, lessonData);
                this.showNotification('–£—Ä–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω!', 'success');
            } else {
                // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ
                const newLesson = this.database.addLesson(
                    this.currentSubject,
                    this.currentTopic,
                    this.currentSubtopic,
                    lessonData
                );
                this.showNotification('–£—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω!', 'success');
                
                // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ä–µ–≤–æ —Ç–µ–º
                this.loadTopics(this.currentSubject);
            }
            
            this.closeModal();
            this.updateStatistics();
            
        } catch (error) {
            this.showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: ' + error.message, 'error');
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    updateStatistics() {
        const stats = this.database.getStatistics();
        this.totalLessonsElement.textContent = stats.totalLessons;
        this.totalSubjectsElement.textContent = stats.subjects;
    }

    /**
     * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        notification.textContent = message;
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 1rem 1.5rem;
            border-radius: 8px;
            color: white;
            font-weight: 500;
            z-index: 1001;
            animation: slideIn 0.3s ease;
        `;
        
        // –¶–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        const colors = {
            success: '#28a745',
            error: '#dc3545',
            warning: '#ffc107',
            info: '#17a2b8'
        };
        
        notification.style.background = colors[type] || colors.info;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.style.animation = 'slideOut 0.3s ease';
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, 300);
        }, 3000);
    }
}

// –î–æ–±–∞–≤–ª—è–µ–º CSS –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const style = document.createElement('style');
style.textContent = `
    @keyframes slideIn {
        from {
            transform: translateX(100%);
            opacity: 0;
        }
        to {
            transform: translateX(0);
            opacity: 1;
        }
    }
    
    @keyframes slideOut {
        from {
            transform: translateX(0);
            opacity: 1;
        }
        to {
            transform: translateX(100%);
            opacity: 0;
        }
    }
`;
document.head.appendChild(style);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    window.educationPlatform = new EducationPlatform();
});
