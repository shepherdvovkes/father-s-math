/**
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π Graph Lab
 * –û—Å–Ω–æ–≤–∞–Ω –Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –∏–∑ graph_lab.py
 */

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let functionLibrary;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
function initDemo() {
    if (typeof FunctionLibrary === 'undefined') {
        console.log('FunctionLibrary –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –∂–¥–µ–º...');
        setTimeout(initDemo, 100);
        return;
    }
    
    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä FunctionLibrary –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    functionLibrary = new FunctionLibrary();
    console.log('Demo –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
function demonstrateAllFunctions() {
    console.log("=== Graph Lab - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π ===\n");
    
    // –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π
    console.log("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:");
    console.log(functionLibrary.listFunctions());
    console.log("\n");
    
    // –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Ñ—É–Ω–∫—Ü–∏—é
    const functionNames = functionLibrary.getFunctionNames();
    
    functionNames.forEach((functionName, index) => {
        console.log(`${index + 1}. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏: ${functionName}`);
        
        const funcInfo = functionLibrary.getFunctionInfo(functionName);
        console.log(`   –¢–∏–ø: ${funcInfo.type}`);
        console.log(`   –§–æ—Ä–º—É–ª–∞: ${funcInfo.formula}`);
        console.log(`   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: ${funcInfo.params.join(', ')}`);
        console.log(`   –î–æ–º–µ–Ω: [${funcInfo.domain.start}, ${funcInfo.domain.stop}], —Ç–æ—á–µ–∫: ${funcInfo.domain.num}`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —à–∞–±–ª–æ–Ω—ã
        const templates = functionLibrary.getTemplates(functionName);
        console.log(`   –®–∞–±–ª–æ–Ω—ã (${templates.length}):`);
        templates.slice(0, 3).forEach((template, i) => {
            console.log(`     –®–∞–±–ª–æ–Ω ${i + 1}: ${JSON.stringify(template)}`);
        });
        if (templates.length > 3) {
            console.log(`     ... –∏ –µ—â–µ ${templates.length - 3} —à–∞–±–ª–æ–Ω–æ–≤`);
        }
        console.log("");
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
function demonstrateFunction(functionName, templateIndex = 0) {
    console.log(`=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏: ${functionName} ===`);
    
    const funcInfo = functionLibrary.getFunctionInfo(functionName);
    if (!funcInfo) {
        console.log("–§—É–Ω–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
        return;
    }
    
    const templates = functionLibrary.getTemplates(functionName);
    if (templateIndex >= templates.length) {
        console.log("–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!");
        return;
    }
    
    const template = templates[templateIndex];
    console.log(`–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π —à–∞–±–ª–æ–Ω: ${JSON.stringify(template)}`);
    
    // –°–æ–∑–¥–∞–µ–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
    const calculator = new Calculator(functionLibrary);
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Ç–æ—á–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞
    const result = calculator.calculatePoints(functionName, template);
    
    if (result.error) {
        console.log(`–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è: ${result.error}`);
        return;
    }
    
    console.log(`–¢–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞: ${result.type}`);
    console.log(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫: ${result.x.length}`);
    console.log(`–î–∏–∞–ø–∞–∑–æ–Ω X: [${Math.min(...result.x).toFixed(2)}, ${Math.max(...result.x).toFixed(2)}]`);
    console.log(`–î–∏–∞–ø–∞–∑–æ–Ω Y: [${Math.min(...result.y).toFixed(2)}, ${Math.max(...result.y).toFixed(2)}]`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ—á–µ–∫
    console.log("–ü–µ—Ä–≤—ã–µ 5 —Ç–æ—á–µ–∫:");
    for (let i = 0; i < Math.min(5, result.x.length); i++) {
        console.log(`  (${result.x[i].toFixed(3)}, ${result.y[i].toFixed(3)})`);
    }
    console.log("");
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π –ø–æ —Ç–∏–ø–∞–º
function demonstrateByType() {
    console.log("=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π –ø–æ —Ç–∏–ø–∞–º ===\n");
    
    const functionNames = functionLibrary.getFunctionNames();
    const byType = {};
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ —Ç–∏–ø–∞–º
    functionNames.forEach(name => {
        const funcInfo = functionLibrary.getFunctionInfo(name);
        const type = funcInfo.type;
        if (!byType[type]) {
            byType[type] = [];
        }
        byType[type].push(name);
    });
    
    // –í—ã–≤–æ–¥–∏–º –ø–æ —Ç–∏–ø–∞–º
    Object.keys(byType).forEach(type => {
        console.log(`${type.toUpperCase()} —Ñ—É–Ω–∫—Ü–∏–∏ (${byType[type].length}):`);
        byType[type].forEach(name => {
            const funcInfo = functionLibrary.getFunctionInfo(name);
            console.log(`  - ${name}: ${funcInfo.formula}`);
        });
        console.log("");
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–æ–≤
function demonstrateTemplates() {
    console.log("=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–æ–≤ ===\n");
    
    const functionNames = functionLibrary.getFunctionNames();
    
    functionNames.forEach(name => {
        const templates = functionLibrary.getTemplates(name);
        console.log(`${name}: ${templates.length} —à–∞–±–ª–æ–Ω–æ–≤`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ —à–∞–±–ª–æ–Ω–æ–≤
        templates.slice(0, 2).forEach((template, i) => {
            console.log(`  –®–∞–±–ª–æ–Ω ${i + 1}: ${JSON.stringify(template)}`);
        });
        console.log("");
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
function performanceTest() {
    console.log("=== –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ===\n");
    
    const calculator = new Calculator(functionLibrary);
    const testFunctions = ["Linear", "Quadratic", "Sine", "Rose curve", "Butterfly (polar)"];
    
    testFunctions.forEach(functionName => {
        const funcInfo = functionLibrary.getFunctionInfo(functionName);
        const templates = functionLibrary.getTemplates(functionName);
        const template = templates[0];
        
        const startTime = performance.now();
        const result = calculator.calculatePoints(functionName, template);
        const endTime = performance.now();
        
        console.log(`${functionName}:`);
        console.log(`  –í—Ä–µ–º—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è: ${(endTime - startTime).toFixed(2)} –º—Å`);
        console.log(`  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫: ${result.x.length}`);
        console.log(`  –¢–∏–ø: ${result.type}`);
        console.log("");
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
function demonstrateSpecialFunctions() {
    console.log("=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π ===\n");
    
    const specialFunctions = [
        "Hypotrochoid (spiro)",
        "Epicycloid (spiro)", 
        "Lissajous",
        "Butterfly (polar)",
        "Hexagram (Star of David)"
    ];
    
    specialFunctions.forEach(name => {
        if (functionLibrary.getFunctionNames().includes(name)) {
            demonstrateFunction(name, 0);
        }
    });
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
function runDemo() {
    console.log("üöÄ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ Graph Lab JavaScript –≤–µ—Ä—Å–∏–∏\n");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ FunctionLibrary –¥–æ—Å—Ç—É–ø–Ω–∞
    if (typeof FunctionLibrary === 'undefined') {
        console.error("FunctionLibrary –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Å–∫—Ä–∏–ø—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã.");
        return;
    }
    
    try {
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        demonstrateAllFunctions();
        demonstrateByType();
        demonstrateTemplates();
        demonstrateSpecialFunctions();
        performanceTest();
        
        console.log("‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!");
        
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏:", error);
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ
if (typeof window !== 'undefined') {
    window.GraphLabDemo = {
        runDemo,
        demonstrateAllFunctions,
        demonstrateFunction,
        demonstrateByType,
        demonstrateTemplates,
        demonstrateSpecialFunctions,
        performanceTest
    };
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
if (typeof document !== 'undefined') {
    document.addEventListener('DOMContentLoaded', () => {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º demo
        initDemo();
        
        // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã –≤—Å–µ —Å–∫—Ä–∏–ø—Ç—ã –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å
        setTimeout(() => {
            if (typeof FunctionLibrary !== 'undefined' && functionLibrary) {
                runDemo();
            } else {
                console.log("FunctionLibrary –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ runDemo() –≤—Ä—É—á–Ω—É—é.");
            }
        }, 1000);
    });
}
